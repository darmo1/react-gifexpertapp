{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItems.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItems","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OAEI,0BAAMC,SAbY,SAAAC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,OASlB,2BAAOO,KAAK,OAAOC,MAAQT,EAAaU,SAjBlB,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,Y,uBCLjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,gDAEkCC,UAAUH,GAF5C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAGzCa,QAAQC,IAAIR,GAbQ,kBAcbA,GAda,4CAAH,sDCARS,EAAe,SAAC,GAAkB,EAAjBN,GAAkB,IAAfC,EAAc,EAAdA,MAAOV,EAAO,EAAPA,IAIpC,OACI,yBAAKgB,UAAU,2DACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,+BAAKA,EAAL,OCJCS,EAAU,SAAC,GAAc,IAAbrB,EAAY,EAAZA,SAAY,ECAT,SAACA,GAAY,IAAD,EACXd,mBAAS,CAC/BqB,KAAK,GACLe,SAAQ,IAHyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAmBrC,OAbAC,qBAAU,WACT1B,EAASC,GAAW0B,MAAK,SAAAhB,GACtBiB,YAAW,WACVH,EAAS,CACLjB,KAAKG,EACLY,SAAQ,MAEX,UAEJ,CAACtB,IAIIuB,EDhBqBK,CAAa5B,GAAhCa,EAHyB,EAG9BN,KAAae,EAHiB,EAGjBA,QAiBhB,OACI,oCACA,4BAAKtB,GAEJsB,GAAW,0CAEZ,yBAAKJ,UAAU,aAEJL,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eAAcmB,IAAKnB,EAAIC,IAAQD,UEAvCoB,EA9BO,WAAK,IAAD,EAGc5C,mBAAU,CAAC,mBAHzB,mBAGf6C,EAHe,KAGH9C,EAHG,KAWtB,OACI,oCACA,8CACA,6BAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEQ8C,EAAWtB,KAAK,SAAAT,GAAQ,OAErB,kBAAC,EAAD,CAAS6B,IAAK7B,EAAUA,SAAUA,UClBrDgC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,U","file":"static/js/main.20218404.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport  propTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = e => {\r\n        setinputValue(e.target.value)\r\n    }\r\n    const handleSubmit  = e => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats => [inputValue,...cats])\r\n            setinputValue('')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={ inputValue } onChange={handleInputChange} /> \r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories: propTypes.func.isRequired\r\n}","\r\n\r\n export const getGifs = async (category) => {\r\n\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=HXIpiXGymEtg8kyURwXlAnx6XLNWhuEE`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img=>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    console.log(gifs)\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItems = ({id,title, url})=>{\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__flipInY\">\r\n            <img src={url} alt={title} />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItems } from './GifGridItems';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category})=>{\r\n\r\n\r\nconst {data:images, loading} = useFetchGifs(category);\r\n\r\n\r\n\r\n/*    const [images, setimages] = useState([])\r\n\r\n    useEffect(()=>{\r\n       getGifs(category)\r\n       .then(imgs => setimages(imgs))\r\n    },[category]) */\r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n        <h3>{category}</h3>\r\n\r\n        {loading && <p>Cargando...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n               {\r\n                   images.map(img => (\r\n                       <GifGridItems key={img.id} {...img} />\r\n                   ))\r\n               }\r\n           \r\n        </div> \r\n        </>\r\n    )\r\n}","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = (category)=>{\r\n   const [state, setState] = useState({\r\n       data:[],\r\n       loading:true\r\n   }) ;\r\n\r\n   useEffect(()=>{\r\n    getGifs( category ).then(img =>{\r\n       setTimeout(()=>{\r\n        setState({\r\n            data:img,\r\n            loading:false\r\n        })\r\n       },3000)\r\n    })\r\n   },[category])\r\n\r\n\r\n\r\n   return state; // {data:[], loading:true};\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './AddCategory'\r\nimport {GifGrid} from \"./GifGrid\"\r\n\r\nconst  GitExpertApp = ()=>{\r\n\r\n\r\n    const [categories, setCategories] = useState( ['Rick and Morty'])    \r\n\r\n  /*  const handleAdd = ()=>{\r\n       setCategories([...categories, 'Danilo']\r\n       ) } */\r\n        /* otra solucion es con un callback donde recibira un parametro que es el estado anterior asi:\r\n        setCategories( cats => [...cats, 'Danilo'] */\r\n   \r\n    return (\r\n        <>\r\n        <h1> GitExpertApp </h1>\r\n        <hr/>\r\n       \r\n        <AddCategory setCategories={setCategories}/>\r\n        <ol>\r\n            {\r\n                categories.map( category => (\r\n                   // <li key={category}> {category} </li>\r\n                   <GifGrid key={category} category={category}/>\r\n                ))\r\n            }\r\n        </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GitExpertApp; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from './Components/GitExpertApp';\n\n\n\nReactDOM.render(<GitExpertApp />,document.getElementById('root')\n);\n\n"],"sourceRoot":""}